#include <ESP8266WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WebServer.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <WiFiManager.h>

// 24C128 EEPROM相关定义
#define EEPROM_ADDRESS 0x50
#define SCL_PIN D10
#define SDA_PIN D9

// 设置 OLED 屏幕的宽度和高度
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// 设置 NTP 服务器和时区
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 3600 * 8);

// 定义输出引脚
const int relay1Pin = 0;
const int relay2Pin = 2;

// 定义 OLED 的 I2C 引脚
// 这里与24C128的SCL和SDA引脚相同
// 定义 OLED 的 I2C 引脚
const int sclPin = 1;
const int sdaPin = 3;
// 全局变量，用于记录上次检查IP的时间
unsigned long lastIPCheckTime = 0;

// OLED屏幕对象
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Web服务器对象
ESP8266WebServer server(80);

// 结构体存储时间信息
struct TimeInfo {
  int hour;
  int minute;
  int second;
  int day;
  int month;
  int year;
};

// 存储定时的开始小时和分钟
int startHourForGroup1 = 0;
int startMinuteForGroup1 = 0;

// 存储定时的结束小时和分钟
int endHourForGroup1 = 0;
int endMinuteForGroup1 = 0;

// 存储第二个定时的开始小时和分钟
int startHourForGroup2 = 0;
int startMinuteForGroup2 = 0;

// 存储第二个定时的结束小时和分钟
int endHourForGroup2 = 0;
int endMinuteForGroup2 = 0;

// 标志位，判断是否设置了定时
bool isTimedGroup1 = false;
bool isTimedGroup2 = false;

// 存储IP地址的字符串
String ipAddressStr;

// 用于滚动的字符串
String scrollText = "If you have a dream, you will definitely come true, and my dream is to make 100 million. yaoyang production";
int scrollPosition = 0;

// 登录状态标志
bool isLoggedIn = false;

// 管理员用户名和密码
const char* adminUsername = "admin";
const char* adminPassword = "password";

// 自定义错误提示相关宏定义
#define WIFI_CONNECT_FAILED_MSG "WiFi连接失败，请检查网络或通过手机重新配置"
#define WIFI_CHANGED_MSG "WiFi信息已变更，需重新配置网络"
#define NO_SAVED_NETWORK_MSG "未找到保存的网络，可通过手机配置新网络"

// 函数声明
TimeInfo getCurrentTime();
void updateOLED();
void handleRoot();
void handleSetTime1();
void handleSetTime2();
void handleCancelTiming1();
void handleCancelTiming2();
void handleRelay1();
void handleRelay2();
void handleLogin();
void handleTaskList();
void writeEEPROM(int address, const char* data);
String readEEPROM(int address, int length);
bool isInOnPeriod(int startHour, int startMinute, int endHour, int endMinute);

// 函数声明（如果函数定义在后面，先进行前置声明）
void writeTimingSettingsToEEPROM();

// 获取当前时间的函数
TimeInfo getCurrentTime() {
  time_t epochTime = timeClient.getEpochTime();
  struct tm *timeInfo;
  timeInfo = localtime(&epochTime);

  TimeInfo currentTime;
  currentTime.hour = timeInfo->tm_hour;
  currentTime.minute = timeInfo->tm_min;
  currentTime.second = timeInfo->tm_sec;
  currentTime.day = timeInfo->tm_mday;
  currentTime.month = timeInfo->tm_mon + 1;
  currentTime.year = timeInfo->tm_year + 1900;

  return currentTime;
}
// 更新OLED显示内容的函数
void updateOLED() {
  display.clearDisplay();

  // 显示日期时间
  TimeInfo currentTime = getCurrentTime();
  display.setCursor(0, 0);
  display.print(currentTime.day);
  display.print("/");
  display.print(currentTime.month);
  display.print("/");
  display.print(currentTime.year);
  display.setCursor(80, 0);
  display.print(currentTime.hour);
  display.print(":");
  display.print(currentTime.minute);
  display.print(":");
  display.print(currentTime.second);

  // 显示IP地址
  display.setCursor(0, 10);
  display.println(ipAddressStr);

  // 显示继电器状态
  display.setCursor(0, 20);
  display.print(digitalRead(relay1Pin)? "Relay 1: ON " : "Relay 1: OFF ");
  display.setCursor(0, 30);
  display.print(digitalRead(relay2Pin)? "Relay 2: ON" : "Relay 2: OFF");

  // 显示定时设置
  if (isTimedGroup1) {
    display.setCursor(0, 40);
    display.print("time 1: ");
    display.print(startHourForGroup1);
    display.print(":");
    display.print(startMinuteForGroup1);
    display.print(" - ");
    display.print(endHourForGroup1);
    display.print(":");
    display.print(endMinuteForGroup1);
  } else {
    display.setCursor(0, 40);
    display.println("No timing set");
  }

  if (isTimedGroup2) {
    display.setCursor(0, 50);
    display.print("time 2: ");
    display.print(startHourForGroup2);
    display.print(":");
    display.print(startMinuteForGroup2);
    display.print(" - ");
    display.print(endHourForGroup2);
    display.print(":");
    display.print(endMinuteForGroup2);
  } else {
    display.setCursor(0, 50);
    display.println("Timer switch V3.6.3");
  }

  // 显示滚动的底部文本
  display.setCursor(0, SCREEN_HEIGHT - 8);
  display.print(scrollText.substring(scrollPosition));
  scrollPosition++;
  if (scrollPosition >= scrollText.length()) {
    scrollPosition = 0;
  }

  display.display();
}
// 处理根路由的函数
void handleRoot() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  String html = "<!DOCTYPE html>"
                "<html lang=\"zh-CN\">"
                "<head>"
                "<meta charset=\"UTF-8\">"
                "<title>继电器控制</title>"
                "<style>"
                "body {"
                " background-color: #4CAF50;"
                " color: white;"
                " font-family: Arial, sans-serif;"
                " text-align: center;"
                " padding-top: 50px;"
                "}"
                "a {"
                " display: block;"
                " margin: 20px 0;"
                " padding: 10px 20px;"
                " background-color: #008CBA;"
                " color: white;"
                " text-decoration: none;"
                " border-radius: 5px;"
                "}"
                "a:hover {"
                " background-color: #005f73;"
                "}"
                "</style>"
                "</head>"
                "<body>"
                "<h1>继电器控制</h1>"
                "<p><a href=\"/relay1?state=1\">打开继电器1</a></p>"
                "<p><a href=\"/relay1?state=0\">关闭继电器1</a></p>"
                "<p><a href=\"/relay2?state=1\">打开继电器2</a></p>"
                "<p><a href=\"/relay2?state=0\">关闭继电器2</a></p>"
                "<p><a href=\"/setTime1\">设置定时 - 组1</a></p>"
                "<p><a href=\"/setTime2\">设置定时 - 组2</a></p>"
                "<p><a href=\"/cancelTiming1\">取消定时 - 组1</a></p>"
                "<p><a href=\"/cancelTiming2\">取消定时 - 组2</a></p>"
                "<p><a href=\"/taskList\">查看任务列表</a></p>"
                "</body>"
                "</html>";

  server.send(200, "text/html; charset=utf-8", html);
}
// 处理设置定时1的函数
void handleSetTime1() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  if (server.method() == HTTP_POST) {
    startHourForGroup1 = server.arg("startHourForGroup1").toInt();
    startMinuteForGroup1 = server.arg("startMinuteForGroup1").toInt();
    endHourForGroup1 = server.arg("endHourForGroup1").toInt();
    endMinuteForGroup1 = server.arg("endMinuteForGroup1").toInt();
    isTimedGroup1 = true;

    // 将定时设置写入EEPROM
    writeTimingSettingsToEEPROM();

    server.send(200, "text/html; charset=utf-8", "设置成功！");
  } else if (server.method() == HTTP_GET) {
    String html = "<html><head><meta charset=\"UTF-8\"></head><body>"
                  "<style>"
                  "body {"
                  " background-color: #0074D9;"
                  " color: white;"
                  " font-family: Arial, sans-serif;"
                  " text-align: center;"
                  " padding-top: 50px;"
                  "}"
                  "form {"
                  " margin-top: 50px;"
                  "}"
                  "input {"
                  " padding: 10px; margin: 10px;"
                  "}"
                  "button {"
                  " padding: 10px 20px;"
                  "}"
                  "</style>"
                  "<h1>设置定时时间 - 组1</h1>"
                  "<form method='post' action='/setTime1'>"
                  "开启时间：<br>"
                  "小时：<input type='number' name='startHourForGroup1' min='0' max='23' value='" + String(startHourForGroup1) + "'>"
                  "分钟：<input type='number' name='startMinuteForGroup1' min='0' max='59' value='" + String(startMinuteForGroup1) + "'><br><br>"
                  "关闭时间：<br>"
                  "小时：<input type='number' name='endHourForGroup1' min='0' max='23' value='" + String(endHourForGroup1) + "'>"
                  "分钟：<input type='number' name='endMinuteForGroup1' min='0' max='59' value='" + String(endMinuteForGroup1) + "'><br><br>"
                  "<input type='submit' value='设置定时'>"
                  "</form>"
                  "</body></html>";

    server.send(200, "text/html; charset=utf-8", html);
  }
}
// 处理设置定时2的函数
void handleSetTime2() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  if (server.method() == HTTP_POST) {
    startHourForGroup2 = server.arg("startHourForGroup2").toInt();
    startMinuteForGroup2 = server.arg("startMinuteForGroup2").toInt();
    endHourForGroup2 = server.arg("endHourForGroup2").toInt();
    endMinuteForGroup2 = server.arg("endMinuteForGroup2").toInt();
    isTimedGroup2 = true;

    // 将定时设置写入EEPROM
    writeTimingSettingsToEEPROM();

    server.send(200, "text/html; charset=utf-8", "设置成功！");
  } else if (server.method() == HTTP_GET) {
    String html = "<html><head><meta charset=\"UTF-8\"></head><body>"
                  "<style>"
                  "body {"
                  " background-color: #0074D9;"
                  " color: white;"
                  " font-family: Arial, sans-serif;"
                  " text-align: center;"
                  " padding-top: 50px;"
                  "}"
                  "form {"
                  " margin-top: 50px;"
                  "}"
                  "input {"
                  " padding: 10px; margin: 10px;"
                  "}"
                  "button {"
                  " padding: 10px 20px;"
                  "}"
                  "</style>"
                  "<h1>设置定时时间 - 组2</h1>"
                  "<form method='post' action='/setTime2'>"
                  "开启时间：<br>"
                  "小时：<input type='number' name='startHourForGroup2' min='0' max='23' value='" + String(startHourForGroup2) + "'>"
                  "分钟：<input type='number' name='startMinuteForGroup2' min='0' max='59' value='" + String(startMinuteForGroup2) + "'><br><br>"
                  "关闭时间：<br>"
                  "小时：<input type='number' name='endHourForGroup2' min='0' max='23' value='" + String(endHourForGroup2) + "'>"
                  "分钟：<input type='number' name='endMinuteForGroup2' min='0' max='59' value='" + String(endMinuteForGroup2) + "'><br><br>"
                  "<input type='submit' value='设置定时'>"
                  "</form>"
                  "</body></html>";

    server.send(200, "text/html; charset=utf-8", html);
  }
}
// 处理取消定时1的函数
void handleCancelTiming1() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  isTimedGroup1 = false;

  // 将定时设置写入EEPROM
  writeTimingSettingsToEEPROM();

  String html = "<html><head><meta charset=\"text/html; charset=UTF-8\"></meta></head><body>"
                "<style>"
                "body {"
                " background-color: #0074D9;"
                " color: white;"
                " font-family: Arial, sans-serif;"
                " text-align: center;"
                " padding-top: 50px;"
                "}"
                "</style>"
                "<h1>取消定时 - 组1</h1>"
                "<p>定时已取消！</p>"
                "<a href='/'>返回主页面</a>"
                "</body></html>";

  server.send(200, "text/html; charset=utf-8", html);
}
// 处理取消定时2的函数
void handleCancelTiming2() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  isTimedGroup2 = false;

  // 将定时设置写入EEPROM
  writeTimingSettingsToEEPROM();

  String html = "<html><head><meta charset=\"text/html; charset=UTF-8\"></meta></head><body>"
                "<style>"
                "body {"
                " background-color: #0074D9;"
                " color: white;"
                " font-family: Arial, sans-serif;"
                " text-align: center;"
                " padding-top: 50px;"
                "}"
                "</style>"
                "<h1>取消定时 - 组2</h1>"
                "<p>定时已取消！</p>"
                "<a href='/'>返回主页面</a>"
                "</body></html>";

  server.send(200, "text/html; charset=utf-8", html);
}
// 处理继电器1控制的函数
void handleRelay1() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  String state = server.arg("state");
  if (state == "1") {
    digitalWrite(relay1Pin, HIGH); 
  } else if (state == "0") {
    digitalWrite(relay1Pin, LOW); 
  }

  server.send(200, "text/plain", "Relay 1 state changed");
}

void handleRelay2() {
    if (!isLoggedIn) {
        server.sendHeader("Location", "/login");
        server.send(303);
        return;
    }

    String state = server.arg("state");
    Serial.println("获取到的继电器2控制参数: " + state);
    if (state == "1") {
        Serial.println("尝试打开继电器2");
        digitalWrite(relay2Pin, HIGH);
        Serial.println("已执行打开继电器2操作");
    } else if (state == "0") {
        Serial.println("尝试关闭继电器2");
        digitalWrite(relay2Pin, LOW);
        Serial.println("已执行关闭继电器2操作");
    }

    server.send(200, "text/plain", "Relay 2 state changed");
}
  // 处理登录的函数
void handleLogin() {
  if (server.method() == HTTP_GET) {
    String html = "<html><head><title>Login</title><style>"
                  "body {"
                  " background-color: #6C5CE7;"
                  " color: white;"
                  " font-family: Arial, sans-serif;"
                  " text-align: center;"
                  " padding-top: 50px;"
                  "}"
                  "form {"
                  " margin-top: 50px;"
                  "}"
                  "input {"
                  " padding: 10px; margin: 10px;"
                  "}"
                  "button {"
                  " padding: 10px 20px;"
                  "}"
                  "</style></head><body>"
                  "<h1>Login</h1>"
                  "<form method='post' action='/login'>"
                  "Username: <input type='text' name='username'><br>"
                  "Password: <input type='password' name='password'><br>"
                  "<button type='submit'>Login</button>"
                  "</form>"
                  "</body></html>";

    server.send(200, "text/html", html);
  } else if (server.method() == HTTP_POST) {
    String username = server.arg("username");
    String password = server.arg("password");
    if (username == adminUsername && password == adminPassword) {
      isLoggedIn = true;
      server.sendHeader("Location", "/");
      server.send(303);
    } else {
      server.send(401, "text/html", "无效的用户名或密码");
    }
  }
}

// 处理任务列表的函数
void handleTaskList() {
  if (!isLoggedIn) {
    server.sendHeader("Location", "/login");
    server.send(303);
    return;
  }

  String html = "<!DOCTYPE html>"
                "<html lang=\"zh-CN\">"
                "<head>"
                "<meta charset=\"UTF-8\">"
                "<title>定时任务列表</title>"
                "<style>"
                "body {"
                " background-color: #4CAF50;"
                " color: white;"
                " font-family: Arial, sans-serif;"
                " text-align: center;"
                " padding-top: 50px;"
                "}"
                "a {"
                " display: block;"
                " margin: 20px 0;"
                " padding: 10px 20px;"
                " background-color: #008CBA;"
                " color: white;"
                " text-decoration: none;"
                " border-radius: 5px;"
                "}"
                "a:hover {"
                " background-color: #005f73;"
                "}"
                "</style>"
                "</head>"
                "<body>"
                "<h1>定时任务列表</h1>"
                "<p>这里是定时任务的列表。</p>"
                "<a href=\"/addTask\">添加新任务</a>"
                "<a href=\"/editTask\">编辑任务</a>"
                "<a href=\"/deleteTask\">删除任务</a>"
                "</body>"
                "</html>";

  server.send(200, "text/html; charset=utf-8", html);
}

// 判断当前时间是否在指定时间段内的函数
bool isInOnPeriod(int startHour, int startMinute, int endHour, int endMinute) {
  TimeInfo currentTime = getCurrentTime();
  int currentTotalMinutes = currentTime.hour * 60 + currentTime.minute;
  int startTotalMinutes = startHour * 60 + startMinute;
  int endTotalMinutes = endHour * 60 + endMinute;

  if (endTotalMinutes < startTotalMinutes) {
    // 跨越到第二天的情况
    return currentTotalMinutes >= startTotalMinutes || currentTotalMinutes < endTotalMinutes;
  } else {
    // 同一天的情况
    return currentTotalMinutes >= startTotalMinutes && currentTotalMinutes < endTotalMinutes;
  }
}

// 向EEPROM写入数据的函数
void writeEEPROM(int address, const char* data) {
  Wire.beginTransmission(EEPROM_ADDRESS);
  Wire.write((int)(address >> 8));
  Wire.write((int)(address & 0xFF));
  for (uint16_t i = 0; i < strlen(data); i++) {
    Wire.write(data[i]);
    delay(5);
  }
  Wire.endTransmission();
}

// 从EEPROM读取数据的函数
String readEEPROM(int address, int length) {
  String data = "";
  Wire.beginTransmission(EEPROM_ADDRESS);
  Wire.write((int)(address >> 8));
  Wire.write((int)(address & 0xFF));
  Wire.endTransmission(false);

  Wire.requestFrom(EEPROM_ADDRESS, length);
  while (Wire.available()) {
    char c = Wire.read();
    data += c;
  }
  return data;
}

// 从EEPROM读取定时设置数据的函数
void readTimingSettingsFromEEPROM() {
  // 读取定时1的设置
  String data = readEEPROM(0, 12);
  if (data.length() == 12) {
    startHourForGroup1 = data.substring(0, 2).toInt();
    startMinuteForGroup1 = data.substring(2, 4).toInt();
    endHourForGroup1 = data.substring(4, 6).toInt();
    endMinuteForGroup1 = data.substring(6, 8).toInt();
    isTimedGroup1 = data.substring(8, 9) == "1";
  }

  // 读取定时2的设置
  data = readEEPROM(12, 12);
  if (data.length() == 12) {
    startHourForGroup2 = data.substring(0, 2).toInt();
    startMinuteForGroup2 = data.substring(2, 4).toInt();
    endHourForGroup2 = data.substring(4, 6).toInt();
    endMinuteForGroup2 = data.substring(6, 8).toInt();
    isTimedGroup2 = data.substring(8, 9) == "1";
  }
}

// 将定时设置数据写入EEPROM的函数
void writeTimingSettingsToEEPROM() {
  // 构建定时1的数据字符串
  String data = String(startHourForGroup1, DEC) + String(startMinuteForGroup1, DEC) +
                String(endHourForGroup1, DEC) + String(endMinuteForGroup1, DEC) +
                (isTimedGroup1? "1" : "0");

  // 写入定时1的数据到EEPROM
  writeEEPROM(0, data.c_str());

  // 构建定时2的数据字符串
  data = String(startHourForGroup2, DEC) + String(startMinuteForGroup2, DEC) +
         String(endHourForGroup2, DEC) + String(endMinuteForGroup2, DEC) +
         (isTimedGroup2? "1" : "0");

  // 写入定时2的数据到EEPROM
  writeEEPROM(12, data.c_str());
}

void setup() {
  Serial.begin(115200);

  // 使用WiFiManager配置WiFi
  WiFiManager wifiManager;
  if (!wifiManager.autoConnect("ESP8266_Setup")) {
    // 如果连接失败，在OLED显示提示信息
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println(WIFI_CONNECT_FAILED_MSG);
    display.display();
    Serial.println(WIFI_CONNECT_FAILED_MSG);
    while (1);
  }
  Serial.println("已连接到 WiFi");

  // 初始化输出引脚为低电平
  pinMode(relay1Pin, OUTPUT);
  digitalWrite(relay1Pin, LOW);
  pinMode(relay2Pin, OUTPUT);
  digitalWrite(relay2Pin, LOW);

  // 设置I2C引脚并初始化EEPROM
  Wire.begin(SDA_PIN, SCL_PIN);

  // 初始化OLED屏幕
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306分配失败"));
    for (;;);
  }
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Loading");
  display.display();
  delay(2000);
  display.clearDisplay();

  // 初始化NTP客户端
  timeClient.begin();

  // 注册Web服务器路由处理函数
  server.on("/", handleRoot);
  server.on("/setTime1", handleSetTime1);
  server.on("/setTime2", handleSetTime2);
  server.on("/cancelTiming1", handleCancelTiming1);
  server.on("/cancelTiming2", handleCancelTiming2);
  server.on("/relay1", handleRelay1);
  server.on("/relay2", handleRelay2);
  server.on("/login", handleLogin);
  server.on("/taskList", handleTaskList);
  server.begin();

  // 获取并保存IP地址
  IPAddress localIP = WiFi.localIP();
  ipAddressStr = "IP:" + String(localIP[0]) + "." + String(localIP[1]) + "." + String(localIP[2]) + "." + String(localIP[3]);

  // 确保时间同步
  timeClient.update();

  // 从EEPROM读取定时设置数据
  readTimingSettingsFromEEPROM();

  // 打印当前时间
  TimeInfo currentTime = getCurrentTime();
  Serial.print("当前时间: ");
  Serial.print(currentTime.hour);
  Serial.print(":");
  Serial.print(currentTime.minute);
  Serial.print(":");
  Serial.println(currentTime.second);
}

void loop() {
    // 检查WiFi状态，如果连接断开，显示相应提示并尝试重新配置
    if (WiFi.status()!= WL_CONNECTED) {
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(0, 0);

        // 记录连接断开的起始时间
        static unsigned long disconnectStartTime = millis();

        // 如果断开时间较短，暂不显示特殊提示
        if (millis() - disconnectStartTime > 5000) {
            if (WiFi.getMode() == WIFI_STA && WiFi.SSID().length() > 0) {
                display.println(WIFI_CHANGED_MSG);
                Serial.println(WIFI_CHANGED_MSG);
            } else {
                display.println(NO_SAVED_NETWORK_MSG);
                Serial.println(NO_SAVED_NETWORK_MSG);
            }
        }
        display.display();

        WiFiManager wifiManager;
        if (!wifiManager.autoConnect("ESP8266_Setup")) {
            Serial.println("重新配置WiFi失败");
            return;
        }
        Serial.println("WiFi重新连接成功");

        // 获取并更新IP地址
        IPAddress localIP = WiFi.localIP();
        ipAddressStr = "IP:" + String(localIP[0]) + "." + String(localIP[1]) + "." + String(localIP[2]) + "." + String(localIP[3]);

        // 重置断开时间记录
        disconnectStartTime = millis();
    }

    server.handleClient();

    // 更新时间
    timeClient.update();

    // 获取当前时间
    TimeInfo currentTime = getCurrentTime();

    // 如果设置了定时，判断是否在定时时间段内并控制继电器1
    if (isTimedGroup1) {
        bool isInOnPeriodForGroup1 = isInOnPeriod(startHourForGroup1, startMinuteForGroup1, endHourForGroup1, endMinuteForGroup1);
        if (isInOnPeriodForGroup1) {
            digitalWrite(relay1Pin, HIGH);
            Serial.println("Group 1 is ON");
        } else {
            digitalWrite(relay1Pin, LOW);
            Serial.println("Group 1 is OFF");
        }
    }

    // 如果设置了定时，判断是否在定时时间段内并控制继电器2
    if (isTimedGroup2) {
        bool isInOnPeriodForGroup2 = isInOnPeriod(startHourForGroup2, startMinuteForGroup2, endHourForGroup2, endMinuteForGroup2);
        if (isInOnPeriodForGroup2) {
            digitalWrite(relay2Pin, HIGH);
            Serial.println("Group 2 is ON");
        } else {
            digitalWrite(relay2Pin, LOW);
            Serial.println("Group 2 is OFF");
        }
    }

    // 检查是否到达一定时间间隔（这里是5分钟，300000毫秒），更新IP地址和OLED显示
    if (millis() - lastIPCheckTime >= 300000) {
        if (WiFi.status() == WL_CONNECTED) {
            IPAddress localIP = WiFi.localIP();
            ipAddressStr = "IP:" + String(localIP[0]) + "." + String(localIP[1]) + "." + String(localIP[2]) + "." + String(localIP[3]);
        }
        updateOLED();
        lastIPCheckTime = millis();
    }

    updateOLED();
    delay(1000);
}
